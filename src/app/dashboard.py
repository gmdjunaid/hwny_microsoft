"""
Real-time Dashboard for Pathway Financial Data Pipeline

This module provides a simple console-based dashboard to monitor the pipeline output.
It reads from the JSON files generated by the Pathway pipeline and displays them in a rich format.

TODO: Extend this to:
1. Web-based dashboard using Streamlit or FastAPI
2. Real-time charts and graphs
3. Alerts and notifications
4. Historical data visualization
"""

import json
import time
import os
from datetime import datetime
from typing import Dict, List, Any
from rich.console import Console
from rich.table import Table
from rich.layout import Layout
from rich.panel import Panel
from rich.live import Live
from config import OutputConfig, RefreshIntervals


class DashboardViewer:
    """Dashboard for viewing Pathway pipeline output"""
    
    def __init__(self):
        self.console = Console()
        self.output_dir = OutputConfig.OUTPUT_DIR
        
    def read_latest_stocks(self) -> List[Dict[str, Any]]:
        """Read latest stock data from JSON output"""
        try:
            filepath = OutputConfig.LATEST_STOCKS_JSON_PATH
            if not os.path.exists(filepath):
                return []
            
            stocks = []
            with open(filepath, 'r') as f:
                for line in f:
                    if line.strip():
                        stocks.append(json.loads(line.strip()))
            
            return stocks[-10:]  # Get last 10 entries
        except Exception as e:
            self.console.print(f"‚ö†Ô∏è Error reading stock data: {e}")
            return []
    
    def read_news_summary(self) -> List[Dict[str, Any]]:
        """Read news summary from JSON output"""
        try:
            filepath = OutputConfig.NEWS_SUMMARY_JSON_PATH
            if not os.path.exists(filepath):
                return []
            
            news_items = []
            with open(filepath, 'r') as f:
                for line in f:
                    if line.strip():
                        news_items.append(json.loads(line.strip()))
            
            return news_items[-5:]  # Get last 5 entries
        except Exception as e:
            self.console.print(f"‚ö†Ô∏è Error reading news data: {e}")
            return []
    
    def create_stock_table(self, stocks: List[Dict[str, Any]]) -> Table:
        """Create a rich table for stock data"""
        table = Table(title="üìà Latest Stock Prices", show_header=True, header_style="bold magenta")
        
        table.add_column("Ticker", style="cyan", no_wrap=True)
        table.add_column("Company", style="white")
        table.add_column("Price", justify="right", style="green")
        table.add_column("Change %", justify="right")
        table.add_column("Updated", style="dim")
        
        for stock in stocks:
            # Format change with color
            change = stock.get("latest_change", 0)
            change_str = f"{change:+.2f}%"
            change_style = "green" if change > 0 else "red" if change < 0 else "white"
            
            # Format timestamp
            timestamp = stock.get("latest_timestamp", "")
            if timestamp:
                try:
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    time_str = dt.strftime("%H:%M:%S")
                except:
                    time_str = timestamp[:8] if len(timestamp) > 8 else timestamp
            else:
                time_str = "N/A"
            
            table.add_row(
                stock.get("ticker", ""),
                stock.get("company_name", "")[:20],  # Truncate long names
                f"${stock.get('latest_price', 0):.2f}",
                f"[{change_style}]{change_str}[/{change_style}]",
                time_str
            )
        
        return table
    
    def create_news_table(self, news_items: List[Dict[str, Any]]) -> Table:
        """Create a rich table for news data"""
        table = Table(title="üì∞ Latest News Summary", show_header=True, header_style="bold cyan")
        
        table.add_column("Ticker", style="cyan", no_wrap=True)
        table.add_column("News Count", justify="center", style="yellow")
        table.add_column("Latest Article", style="white")
        table.add_column("Time", style="dim")
        
        for item in news_items:
            # Format timestamp
            time_str = item.get("latest_news_time", "")
            if time_str:
                try:
                    dt = datetime.fromisoformat(time_str.replace('Z', '+00:00'))
                    time_str = dt.strftime("%H:%M")
                except:
                    time_str = time_str[:5] if len(time_str) > 5 else time_str
            
            # Truncate long titles
            title = item.get("latest_news_title", "")
            if len(title) > 50:
                title = title[:47] + "..."
            
            table.add_row(
                item.get("ticker", ""),
                str(item.get("news_count", 0)),
                title,
                time_str
            )
        
        return table
    
    def create_status_panel(self) -> Panel:
        """Create a status panel with pipeline information"""
        status_text = f"""
üöÄ Pathway Financial Pipeline Dashboard
‚è∞ Last Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üìÅ Output Directory: {self.output_dir}
üîÑ Refresh Rate: {RefreshIntervals.DASHBOARD_REFRESH_SECONDS}s

Press Ctrl+C to exit
        """.strip()
        
        return Panel(status_text, title="Pipeline Status", border_style="green")
    
    def create_layout(self, stocks: List[Dict[str, Any]], news_items: List[Dict[str, Any]]) -> Layout:
        """Create the dashboard layout"""
        layout = Layout()
        
        layout.split_column(
            Layout(self.create_status_panel(), size=8),
            Layout().split_row(
                Layout(self.create_stock_table(stocks)),
                Layout(self.create_news_table(news_items))
            )
        )
        
        return layout
    
    def run_dashboard(self):
        """Run the live dashboard"""
        self.console.print("üöÄ Starting Pathway Pipeline Dashboard...")
        self.console.print(f"üìÅ Monitoring: {self.output_dir}")
        
        if not os.path.exists(self.output_dir):
            self.console.print(f"‚ö†Ô∏è Output directory doesn't exist: {self.output_dir}")
            self.console.print("Make sure the Pathway pipeline is running!")
            return
        
        try:
            with Live(refresh_per_second=1) as live:
                while True:
                    # Read latest data
                    stocks = self.read_latest_stocks()
                    news_items = self.read_news_summary()
                    
                    # Create and update layout
                    layout = self.create_layout(stocks, news_items)
                    live.update(layout)
                    
                    # Wait before next refresh
                    time.sleep(RefreshIntervals.DASHBOARD_REFRESH_SECONDS)
                    
        except KeyboardInterrupt:
            self.console.print("\n‚èπÔ∏è Dashboard stopped by user")
        except Exception as e:
            self.console.print(f"‚ùå Dashboard error: {e}")


def main():
    """Main dashboard entry point"""
    dashboard = DashboardViewer()
    dashboard.run_dashboard()


if __name__ == "__main__":
    main() 